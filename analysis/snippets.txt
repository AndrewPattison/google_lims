### Create bcbio config (tumor only WTS)

Handling tumor-only WTS projects which will hopefully be rare. No need to handle phenotypes or batch pairing:

```{r rna}
# Use the same information to generate the bcbio CSV file
# Keep the required columns and add information for peddy
template <- bcbio %>% 
  mutate(family_id=subject_id) %>%
  mutate(individual_id=subject_id) %>%
  select(samplename=targetname, 
         description=sample_name,
         batch=subject_id,
         phenotype, family_id, individual_id)

# Since we are merging add the R1/R2 readpair information. Could probably 
# be more elegant...
template_R1 <- template %>%
  mutate(samplename = paste(samplename, '_R1_001.fastq.gz', sep=''))
template_R2 <- template %>%
  mutate(samplename = paste(samplename, '_R2_001.fastq.gz', sep=''))
template <- rbind(template_R1, template_R2)

write.table(template,
            file=here(paste(PROJECT, '_', TYPE, '.csv', sep='')),
            row.names=FALSE,
            col.names=TRUE,
            quote=FALSE,
            sep=',')
```


### Create bcbio config (positive WTS controls)

Different configuration for WTS files; we do not validate against a benchmark / standard. 


```{r posControlFiles, eval=FALSE}
# rsync command as before
bcbio <- samples %>%
  filter(project == 'Positive-control' & 
           type == 'WTS' &
           results == '-') %>%
  mutate(targetname = paste(illumina_id, sample_name, sep='_')) %>%
  select(fastq, sample_id, sample_name, targetname, subject_id, phenotype)

# Create a file list ready for linking
read1 <- bcbio %>%
  mutate(from = paste(fastq, '/', sample_id, '_R1_001.fastq.gz', sep='')) %>%
  mutate(to = paste(targetname, '_R1_001.fastq.gz', sep='')) %>%
  select(from, to)

read2 <- bcbio %>%
  mutate(from = paste(fastq, '/', sample_id, '_R2_001.fastq.gz', sep='')) %>%
  mutate(to = paste(targetname, '_R2_001.fastq.gz', sep='')) %>%
  select(from, to)

link <- rbind(read1, read2)

# Write the file list for linking
write.table(paste('ln', link$from, link$to, sep=' '),
            file='posControl_WTS_files.txt',
            col.names=FALSE,
            row.names=FALSE,
            quote=FALSE)

# As before, generate bcbio CSV. Simpler process here.
template <- bcbio %>% 
  mutate(family_id=subject_id) %>%
  mutate(individual_id=subject_id) %>%
  select(samplename=targetname, 
         batch=subject_id,
         phenotype, family_id, individual_id)

# Add timestamp to description, batch
template <- template %>%
  separate(samplename, c('timestamp', 'machine', 'run'),
           sep='_', extra="drop", 
           remove=FALSE) %>%
  mutate(description=paste(timestamp, machine, run, batch, sep='-')) %>%
  mutate(batch=paste('batch', timestamp, machine, run, batch, sep='-')) %>%
    select(samplename, description, batch, phenotype,
         family_id, individual_id)

# Since we are merging add the R1/R2 readpair information. Could probably 
# be more elegant...
template_R1 <- template %>%
  mutate(samplename = paste(samplename, '_R1_001.fastq.gz', sep=''))
template_R2 <- template %>%
  mutate(samplename = paste(samplename, '_R2_001.fastq.gz', sep=''))
template <- rbind(template_R1, template_R2)



write.table(template,
           file='posControl_WTS.csv',
           row.names=FALSE,
           col.names=TRUE,
           quote=FALSE,
           sep=',')
```


# Check for name clashes or samples present in multiple runs
duplicates <- bcbio %>%
  select(sample_name) %>%
  add_count(sample_name) %>%
  filter(n > 1)

samples %>%
  filter(sample_name %in% duplicates$sample_name) %>%
  select(sample_id, sample_name, subject_id, type, phenotype) %>%
  arrange(sample_name) %>%
  datatable

